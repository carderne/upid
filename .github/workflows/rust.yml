name: rust

on:
  push:
    tags:
      - '*'
    branches: [ main ]
    paths:
      - 'upid_rs/**'
      - 'Cargo.toml'
      - 'Cargo.lock'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - name: Format
        run: cargo fmt --check

      - name: Lint
        working-directory: upid_rs
        run: cargo clippy

      - name: Test
        working-directory: upid_rs
        run: cargo test --all-features

        # Need to also run upid_pg tests (bit more complicated)

  publish:
    needs: test
    environment: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - name: set version
        env:
          RELEASE_TAG: ${{ github.ref }}
        run: |
          sed -i "s/0\\.0\\.999/${RELEASE_TAG##*\/v}/" upid_rs/Cargo.toml
          sed -i "s/0\\.0\\.999/${RELEASE_TAG##*\/v}/" Cargo.lock

      - uses: dtolnay/rust-toolchain@stable
      - name: publish
        env:
          CRATES_TOKEN: ${{ secrets.CRATES_TOKEN }}
        run: |
          cargo publish --package upid --token $CRATES_TOKEN --allow-dirty

  docker:
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker Buildx base image
        env:
          RELEASE_TAG: ${{ github.ref }}
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --output "type=image,push=true" \
            --tag "carderne/postgres-upid:16-${RELEASE_TAG}" \
            --tag "carderne/postgres-upid:16" \
            --tag "carderne/postgres-upid:latest" \
            --cache-from "carderne/postgres-upid:latest" \
            --cache-to type=inline \
            .
